import math

def getDistanceFromAP(accessPoint, signalStrength):
    reference_distance = accessPoint['reference']['distance']
    reference_signal = accessPoint['reference']['signal']
    signal_attenuation = accessPoint['signalAttenuation']
    
    distance = reference_distance * math.pow(10, (reference_signal - signalStrength) / (10 * signal_attenuation))
    
    accessPoint['distance'] = distance
    return accessPoint

def getDistancesForAllAPs(signalStrengths):
    accessPoints = [
        {
            'signalAttenuation': 3,
            'location': {'x': 2, 'y': 3},
            'reference': {'distance': 4, 'signal': -50},
            'name': 'ilknet_ga5513_5G'
        },
        {
            'signalAttenuation': 2,
            'location': {'x': 2, 'y': 5},
            'reference': {'distance': 7, 'signal': -53},
            'name': 'Wifi4'
        },
        {
            'signalAttenuation': 2.5,
            'location': {'x': 7, 'y': 3},
            'reference': {'distance': 9, 'signal': -77},
            'name': 'wifi2'
        }
    ]
    
    distances = []
    
    for i, signalStrength in enumerate(signalStrengths):
        accessPoint = accessPoints[i]
        distance = getDistanceFromAP(accessPoint, signalStrength)
        distances.append({'distance': distance['distance'], 'x': distance['location']['x'], 'y': distance['location']['y']})
    
    return distances

def getNodePosition(signalStrengths):
    distances = getDistancesForAllAPs(signalStrengths)
    
    A = []
    b = []
    
    for distance in distances:
        x = distance['x']
        y = distance['y']
        d = distance['distance']
        
        A.append([x, y])
        b.append([d])
    
    A_transpose = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]
    A_transpose_A = [[sum([A_transpose[i][k] * A[k][j] for k in range(len(A_transpose[i]))]) for j in range(len(A[0]))] for i in range(len(A_transpose))]
    A_transpose_b = [[sum([A_transpose[i][j] * b[j][0] for j in range(len(A_transpose[i]))])] for i in range(len(A_transpose))]
    
    det = A_transpose_A[0][0] * A_transpose_A[1][1] - A_transpose_A[0][1] * A_transpose_A[1][0]
    
    if det == 0:
        return None
    
    x = (A_transpose_A[1][1] * A_transpose_b[0][0] - A_transpose_A[0][1] * A_transpose_b[1][0]) / det
    y = (A_transpose_A[0][0] * A_transpose_b[1][0] - A_transpose_A[1][0] * A_transpose_b[0][0]) / det
    
    return [x, y]


# Örnek kullanım
signalStrengths = [30, 75, 100]
position = getNodePosition(signalStrengths)
print("Estimated Position:", position)
